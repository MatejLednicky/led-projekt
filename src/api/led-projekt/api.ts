/* tslint:disable */
/* eslint-disable */
/**
 * Waiting List Api
 * Ambulance Waiting List management for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xlednickym@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Treatment
 */
export interface Treatment {
    /**
     * Unique id of treatment
     * @type {string}
     * @memberof Treatment
     */
    'id': string;
    /**
     * Name of patient
     * @type {string}
     * @memberof Treatment
     */
    'name'?: string;
    /**
     * Unique identifier of the patient known to Web-In-Cloud system
     * @type {string}
     * @memberof Treatment
     */
    'patientId': string;
    /**
     * Timestamp when the treatment started
     * @type {string}
     * @memberof Treatment
     */
    'startDate'?: string;
    /**
     * Timestamp when the treatment will end
     * @type {string}
     * @memberof Treatment
     */
    'endDate'?: string;
}

/**
 * LedTreatmentListApi - axios parameter creator
 * @export
 */
export const LedTreatmentListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get list of treatments
         * @summary Provides the list of all treatments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTreatments: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/treatments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LedTreatmentListApi - functional programming interface
 * @export
 */
export const LedTreatmentListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LedTreatmentListApiAxiosParamCreator(configuration)
    return {
        /**
         * Get list of treatments
         * @summary Provides the list of all treatments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTreatments(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Treatment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTreatments(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LedTreatmentListApi - factory interface
 * @export
 */
export const LedTreatmentListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LedTreatmentListApiFp(configuration)
    return {
        /**
         * Get list of treatments
         * @summary Provides the list of all treatments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTreatments(options?: any): AxiosPromise<Array<Treatment>> {
            return localVarFp.getTreatments(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LedTreatmentListApi - interface
 * @export
 * @interface LedTreatmentListApi
 */
export interface LedTreatmentListApiInterface {
    /**
     * Get list of treatments
     * @summary Provides the list of all treatments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LedTreatmentListApiInterface
     */
    getTreatments(options?: AxiosRequestConfig): AxiosPromise<Array<Treatment>>;

}

/**
 * LedTreatmentListApi - object-oriented interface
 * @export
 * @class LedTreatmentListApi
 * @extends {BaseAPI}
 */
export class LedTreatmentListApi extends BaseAPI implements LedTreatmentListApiInterface {
    /**
     * Get list of treatments
     * @summary Provides the list of all treatments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LedTreatmentListApi
     */
    public getTreatments(options?: AxiosRequestConfig) {
        return LedTreatmentListApiFp(this.configuration).getTreatments(options).then((request) => request(this.axios, this.basePath));
    }
}


